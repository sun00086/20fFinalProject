openapi: 3.0.0
info:
    description: "This is the REST 'contract' for the Order System"
    version: 1.0.0
    title: "(20F) Group Project - Order System"
    contact:
        name: "(20F) CST 8277"
        email: "normanm@algonquincollege.com"
        url: "https://brightspace.algonquincollege.com/d2l/home/279461"
servers:
    -
        url: "http://localhost:{port}/{contextRoot}/{basePath}"
        variables:
            port: {
                default: "8080"
            }
            contextRoot: {
                default: "rest-orderSystem"
            }
            basePath: {
                default: "api/v1"
            }

security:
    -
        basicAuth: []

components:
    securitySchemes:
        basicAuth:
            type: http
            scheme: basic

    parameters:
        idPathParam:
            in: path
            name: id
            required: true
            schema: {
                type: integer,
                format: int64,
                description: "a resource's id",
                example: 1
            }
        orderidPathParam:
            in: path
            name: orderid
            required: true
            schema: {
                type: integer,
                format: int64,
                description: "a resource's id",
                example: 1
            }
        orderlineidPathParam:
            in: path
            name: orderlineid
            required: true
            schema: {
                type: integer,
                format: int64,
                description: "a resource's id",
                example: 1
            }
        
       
    responses:
        ForbiddenError:
            description: "Access to the specified resource has been forbidden"
        UnauthorizedAdminError:
            description: "request requires HTTP authentication for ADMIN_ROLE"
        UnauthorizedUserError:
            description: "request requires HTTP authentication for USER_ROLE"
        NotFound:
            description: "The specified resource was not found"

    schemas:
        PojoBase:
            type: object
            required: [id, version]
            properties: {
                id: {
                    description: "id of entity",
                    type: integer
                },
                version: {
                    description: "version (OptLock) of entity",
                    type: integer
                },
                createdDate: {
                    description: "creation timestamp of entity",
                    type: string,
                    format: date-time
                    },
                updatedDate: {
                    description: "last-updatd timestamp of entity",
                    type: string,
                    format: date-time
                }
            }

#Customer
        Customer:
            description: "(20F) Group Project - Customer entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                firstName: {type: string, description: "First Name", example: Peter},
                lastName: {type: string, description: "Last Name", example: John},
                email: {type: string, description: "Email", example: peter@gmail.com},
                phoneNumber: {type: string, description: "Phone number", example: '+1.613.888.6666'}
               # billingAddress: {$ref: '#/components/schemas/Address'},
               # shippingAddress: {$ref: '#/components/schemas/Address'}
            }
            
#Product            
        Product:
            description: "(20F) Group Project - Product entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                description: {type: string, description: "Description", example: Green Apple},
                serialNo: {type: string, description: "serialNo", example: 1156 }
            }
            
#Store            
        Store:
            description: "(20F) Group Project - Store entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                storeName: {type: string, description: "Store Name", example: Walmart},
            }
            
        CustomersList:
            description: "Customer List"
            type: array
            items: {
                $ref: "#/components/schemas/Customer"
            }
#Address
        Address:
            description: "(20W) Group Project - Address entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                street: {type: string, description: "Street", example: "1385 Woodroffe Avenue"},
                city: {type: string, description: "City", example: "Ottawa"},
                state: {type: string, description: "State/Province", example: "ON"},
                country: {type: string, description: "Country", example: "Canada"},
                postal: {type: string, description: "Postal Code", example: "K2G 1V8"}
            }
            
# BillingAddress             
        BillingAddress:
            allOf: [{
                $ref: "#/components/schemas/Address"  
            }]
            properties: { 
                alsoShipping: {type: boolean, description: "indicates that this BillingAddress is also the customer's ShippingAddress"}
            }
#ShippingAddress            
        ShippingAddress:
            allOf: [{
                $ref: "#/components/schemas/Address"  
            }]

#Order
        Order:
            description: "(20F) Group Project - Order entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                description: {type: string, description: "Description", example: new order}
                
            }

#OrderLine
        OrderLine:
            description: "(20F) Group Project - OrderLine entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                amount: {type: number, description: "Amount", example: 580.00},
                product: {$ref: '#/components/schemas/Product'}
            }

###################################################################################
#          List of API -- Customer  -- CustomerResource.java -- @Path(customer)   #
###################################################################################

# 
paths:
    /customer:

# GET /customer
        get:
            summary: "Retrieve all customers, (ADMIN)"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }

# POST /custmer
        post:
            summary: "Add new customer, (ADMIN)"
            requestBody: {
                description: "Add new customer",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Customer"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                }
            }

# GET /customer/{id} 
    /customer/{id}:
        get:
            summary: "Retrieve customer by its id, (ADMIN/USER)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }

# DELETE /customer/{id} Removes a customer by its id
        delete:
            summary: "Removes a customer by its id, (ADMIN)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }

# PUT /customer/{id} Modify a customer by its id
        put:
            summary: "Modify a customer by its id, (ADMIN)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "new customer to be modified to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Customer"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
            
# POST /customer/{id}/billingAddress -- add a customer address by its id  

    # /customer/{id}/billingAddress:
    #     post:
    #         summary: "add a customer address by its id"
    #         parameters: [{
    #             $ref: "#/components/parameters/idPathParam"
    #         }]
    #         requestBody: {
    #             description: "new customer to be added to Db",
    #             required: true,
    #             content: {
    #                 application/json: {
    #                     schema: {
    #                         $ref: "#/components/schemas/BillingAddress"
    #                     }
    #                 }
    #             }
    #         }
    #         responses: {
    #             "200": {
    #                 description: "Ok (Successful operation)",
    #                 content: {
    #                     application/json: {
    #                         schema: {
    #                             $ref: "#/components/schemas/BillingAddress"
    #                         }
    #                     }
    #                 }
    #             }
    #         }
                     
            
            
###################################################################################
#          List of API -- Product  -- ProductResource.java --  @Path(Product)     #
###################################################################################

# GET /product  Retrieves all products
    /product:
        get:
            summary: "Retrieve all products, (ADMIN,USER)"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
#POST /product Add new product.
        post:
            summary: "Add new product, (ADMIN)"
            requestBody: {
                description: "Add new product",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Product"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                }
            }

# GET /product{id}  Retrieve product by its id
    /product/{id}:
        get:
            summary: "Retrieve product by its id, (ADMIN,USER)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
# DELETE /product{id}  Delete product by its id            
        delete:
            summary: "Delete product by its id, (ADMIN)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
# PUT /product{id}  Modify product by its id               
        put:
            summary: "Modify a product by its id, (ADMIN)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "new customer to be modified to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Product"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
###################################################################################
#          List of API -- Store  -- StoreResource.java --  @Path(store)           #
###################################################################################           
            
# GET /store  Retrieve all stores           
    /store:
        get:
            summary: "Retrieve all stores, (ADMIN, USER)"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
# POST /store  Add a new store     
        post:
            summary: "Add a new store, (ADMIN)"
            requestBody: {
                description: "new store to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Store"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                }
            }
# GET /store{id}  Retrieve a store by its id   
    /store/{id}:
        get:
            summary: "Retrieve a store by its id, (ADMIN,USER)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }

# DELETE /store{id}  Delete a store by its id   
        delete:
            summary: "Delete a store by its id, (ADMIN)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
# PUT /store{id}  Modified a store by its id               
        put:
            summary: "Modified a store by its id, (ADMIN)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "new customer to be modified to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Store"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }            

###################################################################################
#          List of API -- Order  -- CustomerResource.java                         #
###################################################################################
# @Path(customer)            
#/customer/{id}/order   Get all orders by customer id
# GET
    /customer/{id}/order:
        get:
            summary: "Get all orders by customer id, (ADMIN/USER)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Order"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            
#/customer/{id}/order   Add new order by customer id
# POST
        post:
            summary: "Add new order by customer id, (ADMIN/USER)"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "Add new order by its id",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Order"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Order"
                            }
                        }
                    }
                }
            }
            
    # /customer/{id}/order/{orderid}:
    #     get:
    #         summary: "Retrieves a store by its id"
    #         parameters: [{
    #             $ref: "#/components/parameters/idPathParam"
    #         },{
    #             $ref: "#/components/parameters/orderidPathParam"
    #         }]
    #         responses: {
    #             "200": { 
    #                 description: "Ok (Successful operation)",
    #                 content: {
    #                     application/json: {
    #                         schema: {
    #                             $ref: "#/components/schemas/Order"
    #                         }
    #                     }
    #                 }
    #             },
    #             "401": {
    #                 $ref: "#/components/responses/UnauthorizedUserError"
    #             },
    #             "403": {
    #                 $ref: "#/components/responses/ForbiddenError"
    #             },
    #             "404": {
    #                 $ref: "#/components/responses/NotFound"
    #             }
    #         }
        # delete:
        #     summary: "Removes a store by its id"
        #     parameters: [{
        #         $ref: "#/components/parameters/idPathParam"
        #     },{
        #         $ref: "#/components/parameters/orderidPathParam"
        #     }]
        #     responses: {
        #         "204": {
        #             description: "Ok (No content, successful operation)"
        #         },
        #         "401": {
        #             $ref: "#/components/responses/UnauthorizedUserError"
        #         },
        #         "403": {
        #             $ref: "#/components/responses/ForbiddenError"
        #         },
        #         "404": {
        #             $ref: "#/components/responses/NotFound"
        #         }
        #     }
        # put:
        #     summary: "Modified a store by its id"
        #     parameters: [{
        #         $ref: "#/components/parameters/idPathParam"
        #     },{
        #         $ref: "#/components/parameters/orderidPathParam"
        #     }]
        #     requestBody: {
        #         description: "new customer to be modified to Db",
        #         required: true,
        #         content: {
        #             application/json: {
        #                 schema: {
        #                     $ref: "#/components/schemas/Order"
        #                 }
        #             }
        #         }
        #     }
        #     responses: {
        #         "200": {
        #             description: "Ok (Successful operation)",
        #             content: {
        #                 application/json: {
        #                     schema: {
        #                         $ref: "#/components/schemas/Order"
        #                     }
        #                 }
        #             }
        #         },
        #         "401": {
        #             $ref: "#/components/responses/UnauthorizedUserError"
        #         },
        #         "403": {
        #             $ref: "#/components/responses/ForbiddenError"
        #         },
        #         "404": {
        #             $ref: "#/components/responses/NotFound"
        #         }
        #     } 
        
###################################################################################
#          List of API -- Order  -- CustomerResource.java                         #
###################################################################################
# @Path(customer)          
#/customer/{id}/order/{orderid}/orderline   Get all order line by order id
#GET
    /customer/{id}/order/{orderid}/orderline:
        get:
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            },{
                $ref: "#/components/parameters/orderidPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLine"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
#/customer/{id}/order/{orderid}/orderline   Save order line by order id
#POST
        post:
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            },{
                $ref: "#/components/parameters/orderidPathParam"
            }]
            requestBody: {
                description: "new store to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/OrderLine"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLine"
                            }
                        }
                    }
                }
            }
    /customer/{id}/order/{orderid}/orderline/{orderlineid}:
        get:
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            },{
                $ref: "#/components/parameters/orderidPathParam"
            },{
                $ref: "#/components/parameters/orderlineidPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLine"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }

        # put:
        #     parameters: [{
        #         $ref: "#/components/parameters/idPathParam"
        #     },{
        #         $ref: "#/components/parameters/orderidPathParam"
        #     },{
        #         $ref: "#/components/parameters/orderlineidPathParam"
        #     }]
        #     requestBody: {
        #         description: "new store to be added to Db",
        #         required: true,
        #         content: {
        #             application/json: {
        #                 schema: {
        #                     $ref: "#/components/schemas/OrderLine"
        #                 }
        #             }
        #         }
        #     }
        #     responses: {
        #         "200": {
        #             description: "Ok (Successful operation)",
        #             content: {
        #                 application/json: {
        #                     schema: {
        #                         $ref: "#/components/schemas/OrderLine"
        #                     }
        #                 }
        #             }
        #         }
        #     }
        # delete:
        #     summary: "Removes a store by its id"
        #     parameters: [{
        #         $ref: "#/components/parameters/idPathParam"
        #     },{
        #         $ref: "#/components/parameters/orderidPathParam"
        #     },{
        #         $ref: "#/components/parameters/orderlineidPathParam"
        #     }]
        #     responses: {
        #         "204": {
        #             description: "Ok (No content, successful operation)"
        #         },
        #         "401": {
        #             $ref: "#/components/responses/UnauthorizedUserError"
        #         },
        #         "403": {
        #             $ref: "#/components/responses/ForbiddenError"
        #         },
        #         "404": {
        #             $ref: "#/components/responses/NotFound"
        #         }
        #     }
    